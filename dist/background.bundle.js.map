{"version":3,"file":"background.bundle.js","mappings":"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","sources":["webpack://instantnotes/./background.js"],"sourcesContent":["let sessionActive = false; // Variable to track if the session is active\r\nlet screenshots = []; // Array to store captured screenshots\r\nlet fullscreen = false; // Variable to track fullscreen status\r\n__webpack_nonce__ = 'c29tZSBjb29sIHN0cmluZyB3aWxsIHBvcCB1cCAxMjM='; // Nonce for security purposes\r\n\r\nlet db; // Global database object\r\n\r\n// Function to open or create IndexedDB\r\nfunction opendatabase() {\r\n    return new Promise((resolve, reject) => {\r\n        let request = indexedDB.open('ScreenshotDB', 1);\r\n\r\n        request.onerror = function (event) {\r\n            console.error(\"Database error: \", event.target.errorCode);\r\n            reject(\"Database error: \" + event.target.errorCode);\r\n        };\r\n\r\n        request.onsuccess = function (event) {\r\n            db = event.target.result;\r\n            resolve(\"Database opened successfully\");\r\n        };\r\n\r\n        request.onupgradeneeded = function (event) {\r\n            db = event.target.result;\r\n            if (!db.objectStoreNames.contains('screenshots')) {\r\n                db.createObjectStore('screenshots', { keyPath: 'id', autoIncrement: true });\r\n            }\r\n        };\r\n    });\r\n}\r\n\r\n// Function to save screenshot in IndexedDB using a promise\r\nfunction saveScreenshot(image) {\r\n    return new Promise((resolve, reject) => {\r\n        if (!db) {\r\n            opendatabase().then(() => {\r\n                saveScreenshot(image).then(resolve).catch(reject); // Retry saving after reopening the database\r\n            }).catch((error) => {\r\n                reject(\"Failed to open database for saving screenshot.\");\r\n            });\r\n            return;\r\n        }\r\n\r\n        let transaction = db.transaction(['screenshots'], 'readwrite');\r\n        let objectStore = transaction.objectStore('screenshots');\r\n        let request = objectStore.add({ image: image, timestamp: new Date().getTime() });\r\n\r\n        request.onsuccess = function () {\r\n            resolve(\"Screenshot saved successfully\");\r\n        };\r\n\r\n        request.onerror = function (event) {\r\n            console.error(\"Error saving screenshot: \", event.target.errorCode);\r\n            reject(\"Error saving screenshot: \" + event.target.errorCode);\r\n        };\r\n    });\r\n}\r\n\r\n// Function to retrieve screenshots from IndexedDB using a promise\r\nfunction getScreenshots() {\r\n    return new Promise((resolve, reject) => {\r\n        if (!db) {\r\n            opendatabase().then(() => {\r\n                getScreenshots().then(resolve).catch(reject); // Retry retrieving after reopening the database\r\n            }).catch((error) => {\r\n                reject(\"Failed to open database for retrieving screenshots.\");\r\n            });\r\n            return;\r\n        }\r\n\r\n        // Use a readwrite transaction to get and clear screenshots in one go\r\n        let transaction = db.transaction([\"screenshots\"], \"readwrite\");\r\n        let objectStore = transaction.objectStore(\"screenshots\");\r\n\r\n        let request = objectStore.getAll(); // Retrieve all records at once\r\n\r\n        request.onsuccess = function (event) {\r\n            let screenshots = event.target.result;\r\n\r\n            // Clear the screenshots after retrieval within the same transaction\r\n            let clearRequest = objectStore.clear();\r\n\r\n            clearRequest.onsuccess = function () {\r\n                // Optional: You can log success message for clearing\r\n            };\r\n\r\n            clearRequest.onerror = function (event) {\r\n                console.error(\"Error clearing screenshots: \", event.target.errorCode);\r\n            };\r\n\r\n            resolve(screenshots); // Return the array of screenshots\r\n        };\r\n\r\n        request.onerror = function (event) {\r\n            console.error(\"Error retrieving screenshots: \", event.target.errorCode);\r\n            reject(\"Error retrieving screenshots: \" + event.target.errorCode);\r\n        };\r\n    });\r\n}\r\n\r\n// Function to handle screenshot capture\r\nfunction captureScreenshot(sendResponse) {\r\n    try {\r\n        chrome.storage.local.get(['sessionActive'], (response) => {\r\n            if (response.sessionActive) {\r\n                chrome.tabs.captureVisibleTab(null, { format: \"png\" }, (image) => {\r\n                    chrome.notifications.create({\r\n                        type: \"basic\",\r\n                        iconUrl: chrome.runtime.getURL('logo2.png'), // Change this to your icon path\r\n                        title: \"Screenshot captured\",\r\n                        message: \"Screenshot captured successfully.\",\r\n                    });\r\n\r\n                    saveScreenshot(image).then((message) => {\r\n                        screenshots.push(image); // Store the captured image in the array\r\n                        sendResponse({ success: true, screenshots: screenshots }); // Send success response\r\n                    }).catch((error) => {\r\n                        console.error(error); // Log any errors\r\n                        sendResponse({ success: false, message: error });\r\n                    });\r\n                });\r\n            } else {\r\n                sendResponse({ success: false }); // Send failure response\r\n            }\r\n        });\r\n    } catch (error) {\r\n        console.error(\"Error capturing screenshot: \", error);\r\n        sendResponse({ success: false, message: \"Unable to access local storage for screenshot capture.\" });\r\n    }\r\n}\r\n\r\n// Listen for messages from content scripts or other parts of the extension\r\nchrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n    try {\r\n        if (request.type === \"START_SESSION\") {\r\n            // Open the database when starting the session\r\n            opendatabase().then((message) => {\r\n                sessionActive = true; // Set sessionActive to true\r\n                chrome.storage.local.set({ sessionActive: true }, () => {\r\n                    sendResponse({ sessionActive: true, message: message });\r\n                });\r\n            }).catch((error) => {\r\n                console.error(\"Error opening database: \", error);\r\n                sendResponse({ success: false, message: \"Failed to open database. Session not started.\" });\r\n            });\r\n            return true; // Keep the message channel open for asynchronous response\r\n        } else if (request.type === \"STOP_SESSION\") {\r\n            sessionActive = false; // Set sessionActive to false\r\n            chrome.storage.local.remove('sessionActive', () => {\r\n                getScreenshots().then((savedScreenshots) => {\r\n                    sendResponse({ sessionActive: sessionActive, screenshots: savedScreenshots });\r\n                }).catch((error) => {\r\n                    sendResponse({ success: false, message: error });\r\n                });\r\n            });\r\n            return true; // Keep the message channel open for asynchronous response\r\n        } else if (request.type === \"CHECK_SESSION\") {\r\n            chrome.storage.local.get(['sessionActive'], (result) => {\r\n                sessionActive = result.sessionActive || false; // Default to false if not found\r\n                sendResponse({ sessionActive: sessionActive });\r\n            });\r\n            return true; // Keep the message channel open for asynchronous response\r\n        } else if (request.type === \"Toggle_FullScreen\") {\r\n            fullscreen = request.value; // Update fullscreen status\r\n            if (request.value) {\r\n                chrome.storage.local.set({ fullscreen: true }, () => {\r\n                    sendResponse({ success: true });\r\n                });\r\n            } else {\r\n                chrome.storage.local.remove(\"fullscreen\", () => {\r\n                    sendResponse({ success: true });\r\n                });\r\n            }\r\n            return true; // Keep the message channel open for asynchronous response\r\n        } else if (request.type === \"CHECK_FULLSCREEN\") {\r\n            chrome.storage.local.get(['fullscreen', 'sessionActive'], (result) => {\r\n                sendResponse({ fullscreen: result.fullscreen || false, sessionActive: result.sessionActive || false });\r\n            });\r\n            return true; // Keep the message channel open for asynchronous response\r\n        } else if (request.type === \"captureScreen\") {\r\n            captureScreenshot(sendResponse); // Call the function to capture the screenshot\r\n            return true; // Keep the message channel open for asynchronous response\r\n        }\r\n    } catch (error) {\r\n        console.error(\"Error handling message: \", error); // Log any errors that occur\r\n        sendResponse({ success: false, message: \"An error occurred while processing the request.\" });\r\n    }\r\n});\r\n\r\n// Listen for command events triggered by user shortcuts\r\nchrome.commands.onCommand.addListener((command) => {\r\n    try {\r\n        console.log(\"in command\")\r\n        if (command === \"take_screenshot\") {\r\n            console.log(\"screenshot\")\r\n            captureScreenshot((response) => {\r\n                console.log(response)\r\n                // Handle the response for the command if necessary\r\n            }); // Call the function to capture the screenshot\r\n        }\r\n    } catch (error) {\r\n        console.log(error)\r\n    }\r\n});\r\n"],"names":["db","sessionActive","screenshots","fullscreen","opendatabase","Promise","resolve","reject","request","indexedDB","open","onerror","event","console","error","target","errorCode","onsuccess","result","onupgradeneeded","objectStoreNames","contains","createObjectStore","keyPath","autoIncrement","saveScreenshot","image","then","catch","transaction","objectStore","add","timestamp","Date","getTime","getScreenshots","getAll","clearRequest","clear","captureScreenshot","sendResponse","chrome","storage","local","get","response","tabs","captureVisibleTab","format","notifications","create","type","iconUrl","runtime","getURL","title","message","push","success","onMessage","addListener","sender","set","remove","savedScreenshots","value","commands","onCommand","command","log"],"sourceRoot":""}