(()=>{let e,r=!1,s=[],o=!1;function t(){return new Promise(((r,s)=>{let o=indexedDB.open("ScreenshotDB",1);o.onerror=function(e){console.error("Database error: ",e.target.errorCode),s("Database error: "+e.target.errorCode)},o.onsuccess=function(s){e=s.target.result,r("Database opened successfully")},o.onupgradeneeded=function(r){e=r.target.result,e.objectStoreNames.contains("screenshots")||e.createObjectStore("screenshots",{keyPath:"id",autoIncrement:!0})}}))}function c(r){return new Promise(((s,o)=>{if(!e)return void t().then((()=>{c(r).then(s).catch(o)})).catch((e=>{o("Failed to open database for saving screenshot.")}));let n=e.transaction(["screenshots"],"readwrite").objectStore("screenshots").add({image:r,timestamp:(new Date).getTime()});n.onsuccess=function(){s("Screenshot saved successfully")},n.onerror=function(e){console.error("Error saving screenshot: ",e.target.errorCode),o("Error saving screenshot: "+e.target.errorCode)}}))}function n(){return new Promise(((r,s)=>{if(!e)return void t().then((()=>{n().then(r).catch(s)})).catch((e=>{s("Failed to open database for retrieving screenshots.")}));let o=e.transaction(["screenshots"],"readwrite").objectStore("screenshots"),c=o.getAll();c.onsuccess=function(e){let s=e.target.result,t=o.clear();t.onsuccess=function(){},t.onerror=function(e){console.error("Error clearing screenshots: ",e.target.errorCode)},r(s)},c.onerror=function(e){console.error("Error retrieving screenshots: ",e.target.errorCode),s("Error retrieving screenshots: "+e.target.errorCode)}}))}function a(e){try{chrome.storage.local.get(["sessionActive"],(r=>{r.sessionActive?chrome.tabs.captureVisibleTab(null,{format:"png"},(r=>{chrome.notifications.create({type:"basic",iconUrl:chrome.runtime.getURL("logo2.png"),title:"Screenshot captured",message:"Screenshot captured successfully."}),c(r).then((o=>{s.push(r),e({success:!0,screenshots:s})})).catch((r=>{console.error(r),e({success:!1,message:r})}))})):e({success:!1})}))}catch(r){console.error("Error capturing screenshot: ",r),e({success:!1,message:"Unable to access local storage for screenshot capture."})}}chrome.runtime.onMessage.addListener(((e,s,c)=>{try{if("START_SESSION"===e.type)return t().then((e=>{r=!0,chrome.storage.local.set({sessionActive:!0},(()=>{c({sessionActive:!0,message:e})}))})).catch((e=>{console.error("Error opening database: ",e),c({success:!1,message:"Failed to open database. Session not started."})})),!0;if("STOP_SESSION"===e.type)return r=!1,chrome.storage.local.remove("sessionActive",(()=>{n().then((e=>{c({sessionActive:r,screenshots:e})})).catch((e=>{c({success:!1,message:e})}))})),!0;if("CHECK_SESSION"===e.type)return chrome.storage.local.get(["sessionActive"],(e=>{r=e.sessionActive||!1,c({sessionActive:r})})),!0;if("Toggle_FullScreen"===e.type)return o=e.value,e.value?chrome.storage.local.set({fullscreen:!0},(()=>{c({success:!0})})):chrome.storage.local.remove("fullscreen",(()=>{c({success:!0})})),!0;if("CHECK_FULLSCREEN"===e.type)return chrome.storage.local.get(["fullscreen","sessionActive"],(e=>{c({fullscreen:e.fullscreen||!1,sessionActive:e.sessionActive||!1})})),!0;if("captureScreen"===e.type)return a(c),!0}catch(e){console.error("Error handling message: ",e),c({success:!1,message:"An error occurred while processing the request."})}})),chrome.commands.onCommand.addListener((e=>{try{console.log("in command"),"take_screenshot"===e&&(console.log("screenshot"),a((e=>{console.log(e)})))}catch(e){console.log(e)}}))})();
//# sourceMappingURL=background.bundle.js.map