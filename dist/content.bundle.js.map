{"version":3,"file":"content.bundle.js","mappings":"AAAAA,OAAOC,OAAS,KAEZC,SAASC,iBAAiB,oBAAoB,KAC1C,IAEQD,SAASE,mBAETC,QAAQC,IAAI,wBACZC,OAAOC,QAAQC,YAAY,CAAEC,KAAM,oBAAqBC,OAAO,IAASC,IAChEL,OAAOC,QAAQK,WACfR,QAAQS,MAAM,2CAA4CP,OAAOC,QAAQK,UAAUE,QACvF,MAGJV,QAAQC,IAAI,uBAEZC,OAAOC,QAAQC,YAAY,CAAEC,KAAM,oBAAqBC,OAAO,IAAUC,IACjEL,OAAOC,QAAQK,WACfR,QAAQS,MAAM,2CAA4CP,OAAOC,QAAQK,UAAUE,QACvF,IAGZ,CAAE,MAAOD,GACLT,QAAQS,MAAM,qCAAsCA,EACxD,KAIJZ,SAASC,iBAAiB,WAAYa,IAChB,MAAdA,EAAMC,KACNV,OAAOC,QAAQC,YAAY,CAAEC,KAAM,qBAAuBE,IACtD,GAAIL,OAAOC,QAAQK,UACfR,QAAQS,MAAM,0CAA2CP,OAAOC,QAAQK,UAAUE,cAElF,IACQH,EAASM,YAAcN,EAASO,eAYxD,WACI,IACIZ,OAAOC,QAAQC,YAAY,CAAEC,KAAM,kBAAoBE,IAC/CL,OAAOC,QAAQK,WACfR,QAAQS,MAAM,uCAAwCP,OAAOC,QAAQK,UAAUE,QACnF,GAER,CAAE,MAAOD,GACLT,QAAQS,MAAM,4CAA6CA,EAC/D,CACJ,CArBwBM,EAER,CAAE,MAAON,GACLT,QAAQS,MAAM,qDAAsDA,EACxE,CACJ,GAER,GAcJ","sources":["webpack://instantnotes/./content.js"],"sourcesContent":["window.onload = () => {\r\n    // Listen for changes to fullscreen status\r\n    document.addEventListener(\"fullscreenchange\", () => {\r\n        try {\r\n            // Check if the document is in fullscreen mode\r\n            if (document.fullscreenElement) {\r\n                // Notify the background script that fullscreen is active\r\n                console.log(\"Entering full screen\")\r\n                chrome.runtime.sendMessage({ type: \"Toggle_FullScreen\", value: true }, (response) => {\r\n                    if (chrome.runtime.lastError) {\r\n                        console.error(\"Error sending Toggle_FullScreen message:\", chrome.runtime.lastError.message);\r\n                    }\r\n                });\r\n            } else {\r\n                console.log(\"Exiting full screen\")\r\n                // Notify the background script that fullscreen is no longer active\r\n                chrome.runtime.sendMessage({ type: \"Toggle_FullScreen\", value: false }, (response) => {\r\n                    if (chrome.runtime.lastError) {\r\n                        console.error(\"Error sending Toggle_FullScreen message:\", chrome.runtime.lastError.message);\r\n                    }\r\n                });\r\n            }\r\n        } catch (error) {\r\n            console.error(\"Error in fullscreen change event: \", error);\r\n        }\r\n    });\r\n\r\n    // Listen for keydown events to check for specific key presses\r\n    document.addEventListener(\"keydown\", (event) => {\r\n        if (event.key === 'Y') {\r\n            chrome.runtime.sendMessage({ type: \"CHECK_FULLSCREEN\" }, (response) => {\r\n                if (chrome.runtime.lastError) {\r\n                    console.error(\"Error sending CHECK_FULLSCREEN message:\", chrome.runtime.lastError.message);\r\n                } else {\r\n                    try {\r\n                        if (response.fullscreen && response.sessionActive) {\r\n                            captureScreen(); // Call function to capture the screen\r\n                        }\r\n                    } catch (error) {\r\n                        console.error(\"Error processing response from background script: \", error);\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n\r\n    // Function to send a message to the background script for screen capture\r\n    function captureScreen() {\r\n        try {\r\n            chrome.runtime.sendMessage({ type: \"captureScreen\" }, (response) => {\r\n                if (chrome.runtime.lastError) {\r\n                    console.error(\"Error sending captureScreen message:\", chrome.runtime.lastError.message);\r\n                }\r\n            });\r\n        } catch (error) {\r\n            console.error(\"Error sending message to capture screen: \", error);\r\n        }\r\n    }\r\n};\r\n"],"names":["window","onload","document","addEventListener","fullscreenElement","console","log","chrome","runtime","sendMessage","type","value","response","lastError","error","message","event","key","fullscreen","sessionActive","captureScreen"],"sourceRoot":""}